class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
        set<string> s;
        for(auto it: wordList) 
            s.insert(it);
        if(s.find(endWord) == s.end())
            return 0;
        
        queue<pair<string, int>> q;
        q.push({beginWord, 1});
        int ans = 0;
        while(q.size() > 0){
            int n = q.size();
            ans++;
          //  while(n--){
                string node = q.front().first;
                int dist = q.front().second;
                q.pop();
                for(int i = 0; i < node.size(); i++){
                    string temp = node;
                    for(char c = 'a'; c <= 'z'; c++){
                        temp[i] = c;
                        if(temp == endWord)
                            return dist + 1;
                        if(temp == node)
                            continue;
                        if(s.find(temp) != s.end()){
                            s.erase(temp);
                            q.push({temp, dist + 1});
                        }
                    }
                //}
            }
        }
        return 0;
    }
};
