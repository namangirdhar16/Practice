/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int widthOfBinaryTree(TreeNode* root) {
        
        if(root == NULL)
            return 0;
        queue<pair<TreeNode *,long long int>>q;
        
        q.push({root, 0});
        long long int left = 0;
        int ans = 0;
        while(!q.empty())
        {
            
            left = q.front().second;
            int curr = 0;
            int n = q.size();
            for(int i = 1; i <= n; i++)
            {
                pair<TreeNode *, long long int> front = q.front();
                q.pop();
                
                curr = front.second;
                if(front.first->left)
                    q.push({front.first->left, 2 *1LL*  curr});
                if(front.first->right)
                    q.push({front.first->right, 2 * 1LL * curr + 1});
                
            }
            ans = max(ans, (int)(curr - left + 1));
        }
        return ans;
     
    }
};
