/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL)
            return head;
        if(head->next==NULL)
        {
            Node * newHead = new Node(head->val);
            newHead->random = head->random == head ? newHead : NULL;
            return newHead;
        }
        // step 1
        Node * itr = head;
        Node * copy , * front = head->next;
        while(front)
        {
            itr->next = new Node(itr->val);
            copy = itr->next;
            copy->next = front;
            itr = front;
            front = front->next;
            
        }
        copy = new Node(itr->val);
        itr->next = copy;
        copy->next = NULL;
        itr = head;
        front = itr->next->next;
        copy = itr->next;
        while(front)
        {   
            if(itr->random == NULL)
            copy->random = NULL;
            else
            copy->random = itr->random->next;
            
            itr = itr->next->next;
            front = itr->next->next;
            copy = itr->next;
        }
        if(itr->random == NULL)
        copy->random = NULL;
        else
        copy->random = itr->random->next;
        itr = head;
        Node * secondHead = itr->next;
        copy = itr->next;
        front = copy->next;
        while(front)
        {
            itr->next = front;
            copy->next = front->next;
            itr = front;
            front = front->next->next;
            copy = copy->next;
            
        }
        itr->next = front;
         
        return secondHead;
    }
};
