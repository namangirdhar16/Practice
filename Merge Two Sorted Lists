/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        ListNode * tail = l1->val < l2->val ? l1 : l2;
        ListNode * ptr1 = tail == l1 ? l1->next : l1;
        ListNode * ptr2 = tail == l2 ? l2->next : l2;
        ListNode * head = tail;
        while(ptr1 && ptr2)
        {
            if(ptr1->val < ptr2->val)
            {
                tail->next = ptr1;
                tail = tail->next;
                ptr1 = ptr1->next;
            }
            else
            {
                tail->next = ptr2;
                tail = tail->next;
                ptr2 = ptr2->next;
            }
        }
        while(ptr1)
        {
            tail->next = ptr1;
            ptr1 = ptr1->next;
            tail = tail->next;
        }
        while(ptr2)
        {
            tail->next = ptr2;
            ptr2 = ptr2->next;
            tail = tail->next;
        }
        return head;
    }
};
