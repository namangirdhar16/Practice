class Solution {
public:
    void dfs(int idx, vector<int> &candidates, int sum, vector<int> till_now, int target, vector<vector<int>> &ans) {
        if(idx == candidates.size()) {
            if(sum == target) {
                ans.push_back(till_now);
            }
            return;
        }
        if(candidates[idx] + sum <= target) {
            till_now.push_back(candidates[idx]);
            dfs(idx, candidates, sum + candidates[idx], till_now, target, ans);
            till_now.pop_back();
        }
        // till_now.pop_back();
        dfs(idx + 1, candidates, sum, till_now, target, ans);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        
        vector<vector<int>> ans;
        dfs(0, candidates, 0, {}, target, ans);
        return ans;
    }
};
